package main

import (
	"fmt"
)

//Когда Go обнаруживает ошибку времени выполнения (runtime error),
// то есть ошибку, которая не может быть отслежена компилятором
// (например, деление на 0, разыменование nil указателя, выход за границы массива),
// возникает аварийная ситуация, или в терминах Go — паника (panic).

// Паника завершает работу всех выполняемых функций в текущей программе по принципу стека
// (LIFO — last-in-first-out — последний-зашёл-первый-вышел),
// последняя запущенная подпрограмма будет завершена в первую очередь, аварийно завершает программу и выводит в консоль соответствующее сообщение.
// Это сообщение содержит описание ошибки и трассировку стека. Трассировка стека показывает состояние стека вызовов функций,
// которые были активны во время возникновения паники.

//Помимо ошибок времени выполнения, паника может быть вызвана искусственно с помощью встроенной функции panic().
// Это может быть полезно в случае, когда вам пришло значение, которое вы не знаете, как обрабатывать.

func main() {
	CheckCardSuit("Clubs")
	CheckCardSuit("Joker")
	CheckCardSuit("Spades")
}

func CheckCardSuit(s string) {
	switch s {
	case "Spades": // ...
	case "Hearts": // ...
	case "Diamonds": // ...
	case "Clubs": // ...
	default:
		panic("Нет такой масти: " + s)
	}
	fmt.Println(s)
}
